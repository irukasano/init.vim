# A valid snippet should starts with:
#
#        snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#        endsnippet
#
# Snippet options:
#
#        b - Beginning of line.
#        i - In-word expansion.
#        w - Word boundary.
#        r - Regular expression
#        e - Custom context snippet
#        A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#        snippet emitter "emitter properties" b
#        private readonly ${1} = new Emitter<$2>()
#        public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#        endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet function1 "public function(){}" b
${1:public }function ${2:#:FunctionName}(${3})
{
    ${0:TARGET}
}
endsnippet

snippet function2 "public function with doc" b
/**
 * ${4:#:undocumented function}
 *
 * @return ${5:void}
 * @author ${6:irukasano}
 **/
${1:public }function ${2:#:FunctionName}(${3})
{
    ${0:TARGET}
}
endsnippet

snippet functionl "lambda function () use () {}" b
function (${1}) use (${2}) {
    ${0:TARGET}
}
endsnippet

snippet functiont "test function with doc" b
/**
 * @group ${2:void}
 **/
public function test${1:#:FunctionName}()
{
    \$this->markTestIncomplete();
}
endsnippet

snippet echo "echo with php tag" b
<?php echo h(${0}) ?>
endsnippet

snippet foreach1 "foreach with php tag" b
<?$php foreach ($${1:#:variable} as $${2:#:key}${3: =>}): ?>
${0:TARGET}
<?php endforeach; ?>
endsnippet

snippet foreach2 "foreach hashmap" b
foreach ($${1:#:variable} as $${2:#:key}${3: =>} $${4:#:value}) {
    ${0:TARGET}
}
endsnippet

snippet foreach3 "foreach array list" b
foreach ($${1:#:variable} as $${2:#:x}) {
    ${0:TARGET}
}
endsnippet

snippet for1 "for with php tag" b
<?php for ($${1:i}=${2:0}; $$1 < ${3}; $$1++): ?>
${0:TARGET}
<?php endfor ?>
endsnippet

snippet for2 "for" b
for ($${1:i}=${2:0}; $$1 < ${3}; $$1++) {
    ${0:TARGET}
}
endsnippet

snippet while1 "while with php tag" b
<?php while (${1}): ?>
${0:TARGET}
<?php endwhile ?>
endsnippet

snippet while2 "while" b
while (${1}) {
    ${0:TARGET}
}
endsnippet

snippet if1 "if with php tag" b
<?php if (${1:#:condition}): ?>
${0:TARGET}
<?php endif; ?>
endsnippet

snippet if2 "if else" b
if (${1:#:condition}) {
    ${2:TARGET}
} else {
    ${3:#:code...}
}
${0}
endsnippet

snippet if3 "if" b
if (${1:#:condition}) {
    ${0:TARGET}
}
endsnippet

snippet if? "tarnary operator" b
$${1:#:retVal} = (${2:#:condition}) ? ${3:#:a} : ${4:#:b};
endsnippet

snippet else "else with php tag" b
<?php else: ?>
${0}
endsnippet

snippet class1 "class without constructor" b
/**
 * ${1}
 */
class ${2:#:ClassName}${3:#:extends}
    ${0:TARGET}
}
endsnippet

snippet class2 "class with constructor" b
/**
 * ${1}
 */
class ${2:#:ClassName}${3:#:extends}
{
    ${4:public }function ${5:__construct}(${6:#:argument})
    {
        ${0:TARGET}
    }
}
endsnippet

snippet trait "trait" b
/**
 * ${1:undocumented class}
 *
 * @package ${3:default}
 * @author ${4:irukasano}
 */
trait ${2:`vim_snippets#Filename()`}
{
    ${0:${VISUAL}}
}
endsnippet

snippet doc "documentation" b
/**
 * ${0}
 */
endsnippet

snippet debug1 "debug" b
debug(${0:TARGET});
endsnippet

snippet debug2 "var_dump" b
var_dump(${0:TARGET});
endsnippet

snippet try1 "try catch" b
try {
    ${1:TARGET}
} catch (${2:#:Exception} $e) {
    ${3:#:code}
}
endsnippet

snippet try2 "try catch finally" b
try {
    ${1:TARGET}
} catch (${2:#:Exception} $e) {
    ${3:#:code}
} finally {
    ${4:#:code}
}
endsnippet

snippet throw "throw exception" b
throw new ${1}Exception(${2:"${3:#:Error Processing Request}"}${4:});
${0}
endsnippet

snippet assertNotEquals "$this->assertEquals($a, $b)" b
$this->assertEquals(${1:$expected}, ${2:$actual});
endsnippet

snippet assertNotEquals "$this->assertNotEquals($a, $b)" b
$this->assertNotEquals(${1:$expected}, ${2:$actual});
endsnippet

snippet assertFalse "$this->assertFalse($a)" b
$this->assertFalse(${1});
endsnippet

snippet assertTrue "$this->assertTrue($a)" b
$this->assertTrue(${1});
endsnippet

snippet assertContains "$this->assertContains($needle, $haystack)" b
$this->assertContains(${1:$needle}, ${2:$haystack});
endsnippet

snippet assertNotContains "$this->assertNotContains($needle, $haystack)" b
$this->assertNotContains(${1:$needle}, ${2:$haystack});
endsnippet

snippet assertCount "$this->assertCount($count, $haystack)" b
$this->assertCount(${1:$expectedCount}, ${2:$haystack});
endsnippet

snippet assertNotCount "$this->assertNotCount($count, $haystack)" b
$this->assertNotCount(${1:$count}, ${2:$haystack});
endsnippet

snippet assertNull "$this->assertNull($a)" b
$this->assertNull(${1});
endsnippet

snippet assertNotNull "$this->assertNotNull($a)" b
$this->assertNotNull(${1});
endsnippet

snippet markTestIncomplete "$this->markTestIncomplete()" b
$this->markTestIncomplete(${1});
endsnippet


